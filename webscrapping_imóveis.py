# -*- coding: utf-8 -*-
"""Webscrapping Imóveis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DVpsM1F07r2cgwrObPtwXIdVQPOi-Ep_
"""

#https://www.vivareal.com.br/venda/sp/sao-paulo/zona-oeste/pinheiros/apartamento_residencial/
#Importando as bibliotecas
from requests import get #importa a bilioteca de requisicoes
import numpy as np #importa a biblioteca numpy que realiza operacoes matematicas
from bs4 import BeautifulSoup #importa a biblioteca BeautifulSoup que realiza a funcao de captura de dados
from time import sleep #biblioteca que realiza um delay no codigo
from random import randint #biblioteca que cria informacoes randomicas e aleatorias
from warnings import  warn #biblioteca para realizar teste de requisicao
import pandas as pd #bilioteca de analise de dados do pandas
import seaborn as sns #biblioteca que realiza dados estatisticos
import matplotlib.pyplot as plt #biblioteca que realiza montagem de graficos

#definicao variaveis
pages = np.arange(1,60,50)#selecionar os números das páginas
headers = {'Accept-Language': 'pt-BR,pt;q=0.8'}#definição cabecalho do HTML e linguagem da pagina
enderecos = []
quartos = []
vagas = []
valores = []
areas = []

#code

regiao = str(input("Insira sua região da seguinte forma: \nzona-oeste \nzona-leste \nzona-sul \nzona-norte \ncentro\n"))
tipo_imovel = str(input("Insira um tipo de imóvel: \ncasa_residencial \napartamento_residencial \nflat_residencial \nimovel-comercial_comercial \nlote-terreno_comercial\n"))
bairro = str(input("Escreva o bairro: \nEm caso de bairros com nomes compostos exemplo:\n Bairro: Campo Belo\n digitar da seguinte forma em minúsculo:campo-belo\n"))
for page in pages:
  response = get("https://www.vivareal.com.br/venda/sp/sao-paulo/"+ str(regiao)+"/"+str(bairro)+"/"+str(tipo_imovel)+"/?pagina="+str(page),headers=headers)
  sleep(randint(2,10))#delay
  
  if response.status_code !=200:
    warn('O pedido: {}; retornou o codigo: {}'.format(response.status_code))
  
  page_html = BeautifulSoup(response.text,'html.parser')#função html parser é uma função do beautifulSoup
  imoveis_containers = page_html.find_all('div', class_='property-card__content')#define o container que a informação está
  for container in imoveis_containers:
    #captura o endereco
    if container.h2.find('span', class_ = 'property-card__address') is not None:#analisar essas linha parei aqui
      endereco = container.h2.find('span', class_ = 'property-card__address',).text
      enderecos.append(endereco)
    else:
      enderecos.append("")
    
    #captura o valor
    if container.section.find('div', class_ = 'property-card__price js-property-card-prices js-property-card__price-small') is not None:#analisar essas linha parei aqui
      valor = container.section.find('div', class_ = 'property-card__price js-property-card-prices js-property-card__price-small',).text
      valores.append(valor)
    else:
      valores.append("R$0")
 
    #captura a área
    if container.ul.find('li', class_ = 'property-card__detail-item property-card__detail-area') is not None:#analisar essas linha parei aqui
      area = container.ul.find('li', class_ = 'property-card__detail-item property-card__detail-area',).text
      areas.append(area)
    else:
      areas.append(None)

    #captura a qtd de vagas
    if container.ul.find('li', class_ = 'property-card__detail-item property-card__detail-garage js-property-detail-garages') is not None:#analisar essas linha parei aqui
      vaga = container.ul.find('li', class_ = 'property-card__detail-item property-card__detail-garage js-property-detail-garages',).text
      vagas.append(vaga)
    else:
      vagas.append(None)

    #captura a quantidade de quartos
    if container.ul.find('li', class_ = 'property-card__detail-item property-card__detail-room js-property-detail-rooms') is not None:#analisar essas linha parei aqui
      quarto = container.ul.find('li', class_ = 'property-card__detail-item property-card__detail-room js-property-detail-rooms',).text
      quartos.append(quarto)
    else:
      quarto.append(None)

imoveis_df = pd.DataFrame(
    {
      'Endereco':enderecos,
      'Valor': valores,
      'Area': areas,
      'Quarto': quartos,
      'Vaga': vagas,
    }
)
imoveis_df.tail(80)